@page "/book-property/{PropertyId}"
   
<PageTitle>Book a property</PageTitle>

@using System.ComponentModel.DataAnnotations
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Text;
@using Web.Shared.Dto;
@inject LocalStorageManager LocalStorageManager
@inject NavigationManager NavigationManager
@using Web.Shared.Dto.Property;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<style>
.validation-message {
    color: red;
    font-size: 0.8em;
    margin-top: 2px;
}

.form-group {
    margin-bottom: 15px;
}

.form-control {
    width: 100%;
    padding: 0.375rem 0.75rem;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
}

.btn-primary {
    padding: 10px 15px;
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
    cursor: pointer;
}

.form-control {
    background: none !important; 
}

 .valid.modified {
    outline: none !important; 
 }
</style>


<NotificationComponent @ref="notificationComponent" />

<h3>Book the property @property.Name</h3>

<EditForm EditContext="@editContext" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

   <div class="form-group">
        <label for="cost">Estimated cost:</label>
        <div id="cost" class="form-control">@estimatedPrice</div>
    </div>

    
    <div class="form-group">
        <label for="startDate">Start Date:</label>
        <InputDate id="startDate" @bind-Value="createBookingModel.StartDate" class="form-control" />
    </div>

    <div class="form-group">
        <label for="endDate">EndDate:</label>
        <InputDate id="endDate" @bind-Value="createBookingModel.EndDate" class="form-control" />
    </div>    

    <button type="submit" class="btn btn-primary" disabled="@isFormInvalid">Book now</button>
</EditForm>

@code {
    [Parameter]
    public string PropertyId { get; set; }
    private PropertyModel property = new PropertyModel();
    private List<DateTime> availableDates;
    private CreateBookingModel createBookingModel = new CreateBookingModel();
    private EditContext editContext;
    private bool isFormInvalid = true;
    private decimal estimatedPrice;
    private NotificationComponent notificationComponent;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            availableDates = await Http.GetFromJsonAsync<List<DateTime>>($"api/properties/{PropertyId}/available-days");
            if (availableDates != null && availableDates.Count > 0)
            {

                await JSRuntime.InvokeVoidAsync("initializeFlatpickrWithValidDays", "endDate", availableDates);
                await JSRuntime.InvokeVoidAsync("initializeFlatpickrWithValidDays", "startDate", availableDates);
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(createBookingModel);
        editContext.OnFieldChanged += HandleFieldChanged;

        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() }
            };
        property = await Http.GetFromJsonAsync<PropertyModel>($"api/properties/{PropertyId}", options);   
        availableDates = await Http.GetFromJsonAsync<List<DateTime>>($"api/properties/{PropertyId}/available-days");

        if (availableDates.Count == 0)
        {
            notificationComponent.Warn("Sorry, but it looks like this property has no dates available. Try something else.");
            return;
        }

        createBookingModel.StartDate = availableDates.First();
        createBookingModel.EndDate = availableDates.Last();
        createBookingModel.PropertyID = property.ID;
        CalculateTotalPrice();
        UpdateIsFormInvalid();
    }

    private void CalculateTotalPrice()
    {
        int days = (int)(createBookingModel.EndDate - createBookingModel.StartDate).TotalDays + 1;
        estimatedPrice = property.PricePerNight * days;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        UpdateIsFormInvalid();
    }

    private void UpdateIsFormInvalid()
    {
        isFormInvalid = !editContext.Validate();
        StateHasChanged();
        CalculateTotalPrice();
    }

    private async Task HandleSubmit()
    {
        var token = await LocalStorageManager.GetAuthTokenAsync();

         if (token == null)
         {
             NavigationManager.NavigateTo("/login");
             return;
         }

        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() }
            };
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"api/bookings/");
            var json = JsonSerializer.Serialize(createBookingModel, options);
            request.Content = new StringContent(json, Encoding.UTF8, "application/json");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Trim('"'));
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/bookings", forceLoad: true);
                return;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged; 
    }
}