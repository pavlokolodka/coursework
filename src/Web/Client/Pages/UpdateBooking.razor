@page "/update-booking/{BookingId}"
          
<PageTitle>Update booking</PageTitle>


@using System.ComponentModel.DataAnnotations
@using System.Web;
@using Newtonsoft.Json;
@using System.Text.Json.Serialization;
@using System.Text;
@using Web.Shared.Dto;
@inject TokenManager TokenManager
@inject NavigationManager NavigationManager
@using Web.Shared.Dto.Property;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<style>
.validation-message {
    color: red;
    font-size: 0.8em;
    margin-top: 2px;
}

.form-group {
    margin-bottom: 15px;
}

.form-control {
    width: 100%;
    padding: 0.375rem 0.75rem;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
}

.btn-primary {
    padding: 10px 15px;
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
    cursor: pointer;
}

.form-control {
    background: none !important; 
}

 .valid.modified {
    outline: none !important; 
 }
</style>

<h3>Update the booking @property.Name</h3>

<EditForm EditContext="@editContext" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

   <div class="form-group">
        <label for="cost">Estimated cost:</label>
        <div id="cost" class="form-control">@estimatedPrice</div>
    </div>

    
    <div class="form-group">
        <label for="startDate">Start Date:</label>
        <InputDate id="startDate" @bind-Value="updateBookingModel.StartDate" class="form-control" />
    </div>

    <div class="form-group">
        <label for="endDate">EndDate:</label>
        <InputDate id="endDate" @bind-Value="updateBookingModel.EndDate" class="form-control" />
    </div>    

    <button type="submit" class="btn btn-primary" disabled="@isFormInvalid">Book now</button>
</EditForm>

@code {
    [Parameter]
    public string BookingId { get; set; }
    private PropertyModel property = new PropertyModel();
    private BookingModel booking = new BookingModel();
    private UpdateBookingModel updateBookingModel = new UpdateBookingModel();
    private EditContext editContext;
    private bool isFormInvalid = true;
    private decimal estimatedPrice;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await TokenManager.GetAuthTokenAsync();

            if (token == null)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }


            var options = new System.Text.Json.JsonSerializerOptions
            {
                    PropertyNameCaseInsensitive = true,
                    Converters = { new JsonStringEnumConverter() }
                };

            var bookingRequest = new HttpRequestMessage(HttpMethod.Get, $"api/bookings/{BookingId}");
            bookingRequest.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Trim('"'));
            var response = await Http.SendAsync(bookingRequest);

            if (!response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/bookings");
                return;
            }

            string jsonString = await response.Content.ReadAsStringAsync();
            booking = Newtonsoft.Json.JsonConvert.DeserializeObject<BookingModel>(jsonString);  
            property = await Http.GetFromJsonAsync<PropertyModel>($"api/properties/{booking.PropertyID}", options);        
            updateBookingModel.StartDate = booking.StartDate;
            updateBookingModel.EndDate = booking.EndDate;
            var availableDates = await Http.GetFromJsonAsync<List<DateTime>>($"api/properties/{booking.PropertyID}/available-days");
            AddCurrentBookingDaysToAvailibleDays(booking.StartDate, booking.EndDate, availableDates);
            if (availableDates != null && availableDates.Count > 0)
            {
                await JSRuntime.InvokeVoidAsync("initializeFlatpickrWithValidDays", "endDate", availableDates);
                await JSRuntime.InvokeVoidAsync("initializeFlatpickrWithValidDays", "startDate", availableDates);
            }


            StateHasChanged();
            UpdateIsFormInvalid();
        }
    }

    private void AddCurrentBookingDaysToAvailibleDays(DateTime startDate, DateTime endDate, List<DateTime> availableDates)
    {
        for (DateTime date = property.StartDate.Date; date <= property.EndDate.Date; date = date.AddDays(1))
        {
            availableDates.Add(date);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(updateBookingModel);
        editContext.OnFieldChanged += HandleFieldChanged;

        var token = await TokenManager.GetAuthTokenAsync();

        if (token == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }


        var options = new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() }
            };

        
    }

    private void CalculateTotalPrice()
    {
        DateTime EndDate = updateBookingModel.EndDate;
        DateTime StartDate = updateBookingModel.StartDate;
        int days = (int)(EndDate - StartDate).TotalDays + 1;
        estimatedPrice = property.PricePerHour * days;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        UpdateIsFormInvalid();
    }

    private void UpdateIsFormInvalid()
    {
        isFormInvalid = !editContext.Validate();
        CalculateTotalPrice();
        StateHasChanged();        
    }

    private async Task HandleSubmit()
    {
        var token = await TokenManager.GetAuthTokenAsync();

         if (token == null)
         {
             NavigationManager.NavigateTo("/login");
             return;
         }

        var options = new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() }
            };
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Patch, $"api/bookings/{BookingId}");
            var json = System.Text.Json.JsonSerializer.Serialize(updateBookingModel, options);
            request.Content = new StringContent(json, Encoding.UTF8, "application/json");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Trim('"'));
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/bookings", forceLoad: true);
                return;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged; 
    }
}