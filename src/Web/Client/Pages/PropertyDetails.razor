@page "/property-details/{PropertyId}"

@using System.Text.Json;
@using System.Text.Json.Serialization;
@using Web.Shared.Dto;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject TokenManager TokenManager

<style>
.property-details-container {
    display: flex;
    flex-wrap: wrap;
    margin-top: 20px;
}

.image-container {
    flex: 1 1 300px; 
    max-width: 300px;
}

.image-container img {
    width: 100%; 
    height: auto;
    border-radius: 8px; 
}

.info-container {
    flex: 3 1 600px; 
    padding-left: 20px; 
    max-width: 600px;
}

.description-container {
    width: 100%; 
    margin-top: 20px; 
    padding: 10px;
}

.property-details-container p, .property-details-container h3 {
    margin: 5px 0; 
}

.floating-button {
    position: fixed;
    right: 20px;
    bottom: 20px;
    padding: 10px 20px;
    font-size: 16px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
    transition: background-color 0.3s ease;
}

.floating-button:hover {
    background-color: #0056b3;
}

</style>


@if (property != null)
{
       
        <div class="property-details-container">
    <div class="image-container">
        <img src="@property.ImageUrl" />

    </div>
    <div class="info-container">
        <h3>@property.Name</h3>
        <p><strong>Type:</strong> @property.Type</p>
        <p><strong>Location:</strong> @property.Location</p>
        <p><strong>Contact:</strong> @property.ContactName (@property.ContactPhone)</p>
        <p><strong>Price Per Hour:</strong> $@property.PricePerHour</p>
        <p><strong>Capacity:</strong> @property.Capacity</p>
        <p><strong>Available Dates:</strong> @property.StartDate.ToShortDateString() - @property.EndDate.ToShortDateString()</p>

        @if (Token != null)
        { 
            @if (isUserProperty)
            {
                <button class="floating-button" @onclick="() => NavigateToUpdateProperty()">Update the property</button>
            }
            else
            {
               <button class="floating-button" @onclick="() => NavigateToBookProperty()">Book the property</button>
               
            }     
        }

    </div>
    <div class="description-container">
                <h3>Description:</h3>
        <p>@property.Description</p>
    </div>
</div>
}
else
{
        <p>Loading property details...</p>
}

@code {
    [Parameter]
    public string PropertyId { get; set; }
    private PropertyModel property;
    private bool isUserProperty = false;
    private string? Token;

    protected override async Task OnInitializedAsync()
    {
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() }
            };
        property = await Http.GetFromJsonAsync<PropertyModel>($"api/properties/{PropertyId}", options);

        string userId = await TokenManager.GetUserIdAsync();
        Token = await TokenManager.GetAuthTokenAsync();

        Console.WriteLine($"Token {Token}");
        Console.WriteLine($"Token! {Token != null}");

        if (!string.IsNullOrEmpty(userId))
        {
            isUserProperty = property.UserID.ToString() == userId.Trim('"');
        }
    }

    private void NavigateToUpdateProperty()
    {     
        NavigationManager.NavigateTo($"/update-property/{PropertyId}");
    }
    private void NavigateToBookProperty()
    {
        NavigationManager.NavigateTo($"/book-property/{PropertyId}");
    }  

}